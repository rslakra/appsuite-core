# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Build Maven Package and Publish

on:
  push:
    branches: [ "master" ]
  
  pull_request:
    branches: [ "master" ]
  
  release:
    types: [ created ]

env:
  NAME: Rohtash
  ENV_TYPE: develop

permissions:
  contents: read

jobs:
  build:
    env:
      JDK_VERSION: '21'
      VERSION: ${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}
    
    name: Build & Test (Units & Integrations)
    runs-on: ubuntu-latest
    
    # makes sure that workflow has access to the code.
    permissions:
      contents: read
      packages: write
    
    # Steps
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment
        id: setup_env
        run: |
          #!/bin/bash
          echo "VERSION: ${env.VERSION}"
          BUILD_TIMESTAMP=$(date +%s)
          BUILD_DATE=$(date -d @${BUILD_TIMESTAMP} +%Y/%m/%d)
          VERSION_FILE="version.txt"
          
          # Check if the version file exists
          if [ ! -f "$VERSION_FILE" ]; then
            echo "Error: Version file '$VERSION_FILE' not found."
            exit 1
          fi
          
          # Read the content of the file into a variable
          RELEASED_VERSION=$(cat "$VERSION_FILE")
          echo "RELEASED_VERSION: ${RELEASED_VERSION}"
          
          RELEASE_VERSION=0.0.73
          # Generate New Release Version
          SNAPSHOT_VERSION="${RELEASE_VERSION}-SNAPSHOT"
          echo "RELEASE_VERSION: ${RELEASE_VERSION}, SNAPSHOT_VERSION: ${SNAPSHOT_VERSION}"
          
          # Set Environment Variables
          echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> "$GITHUB_ENV"
          echo "BUILD_DATE=$BUILD_DATE" >> "$GITHUB_ENV"
          echo "RELEASED_VERSION=$RELEASED_VERSION" >> "$GITHUB_ENV"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_ENV"
          echo "SNAPSHOT_VERSION=$SNAPSHOT_VERSION" >> "$GITHUB_ENV"

      - name: Print Environment Variables
        run: |
          echo "Hello, ${NAME}"
          echo "envType=${ENV_TYPE}"
          echo "JDK Version ${{env.JDK_VERSION}}"
          echo "VERSION: ${{env.VERSION}}"
          echo "GitHub Workspace=${GITHUB_WORKSPACE}"
          echo "RELEASE_VERSION: ${RELEASE_VERSION}"
          echo "SNAPSHOT_VERSION: ${SNAPSHOT_VERSION}"

      # Sets JDK Version
      - name: Setup JDK ${{env.JDK_VERSION}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{env.JDK_VERSION}}
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
          architecture: x64
          cache: maven

      # Step for compiling code
      # Use -B or --batch-mode for non-interactive builds
      - name: Build Maven Package
        run: |
          #!/bin/bash
          echo "RELEASE_VERSION: ${RELEASE_VERSION}"
          echo "SNAPSHOT_VERSION: ${SNAPSHOT_VERSION}"
          mvn -B clean package -Drevision=$RELEASE_VERSION
      #    mvn -B clean package -Drevision=$SNAPSHOT_VERSION
      #    mvn -B package -Drevision=$RELEASE_VERSION -DskipTests=true
      #    - name: Build with Maven
      #      run: mvn -B package --file pom.xml
      
      # Step for running unit-tests
      # Use -B or --batch-mode for non-interactive builds
      - name: Maven Verify Package
        run: |
          #!/bin/bash
          echo "RELEASE_VERSION: ${RELEASE_VERSION}"
          echo "SNAPSHOT_VERSION: ${SNAPSHOT_VERSION}"
          mvn -B verify -Drevision=$RELEASE_VERSION

      - name: Build Artifact
        run: |
          BUILD_FILE_NAME=${BUILD_TIMESTAMP}_${GITHUB_REF_NAME//\//_}_${GITHUB_SHA}.zip
          echo "BUILD_FILE_NAME=${BUILD_FILE_NAME}"
          git archive -v -o target/${BUILD_FILE_NAME} --format=zip HEAD
          ls -la target/${BUILD_FILE_NAME}

#      # Run the Maven 'verify' phase
#      - name: Run the Maven's verify phase
#        run: mvn --batch-mode --update-snapshots verify
          
          # Step for Publishing Package to GitHub
          #    - name: Publish to GitHub Packages Apache Maven
          #      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
          #      env:
        #        GITHUB_TOKEN: ${{ github.token }}


#      - name: Maven Verify Integration Tests
#        run: mvn -B clean verify -Pintegration-test
#
#    - name: Run the Maven verify phase
#      run: mvn --batch-mode --update-snapshots verify
#    - run: mkdir releases && cp target/*.jar releases
#
#      - name: Upload build artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: Package
#          path: releases


  publish:
    runs-on: ubuntu-latest
    needs: build # Depends on build
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set Environment
        run: |
          #!/bin/bash
          VERSION_FILE="version.txt"
          
          # Check if the version file exists
          if [ ! -f "$VERSION_FILE" ]; then
            echo "Error: Version file '$VERSION_FILE' not found."
            exit 1
          fi
          
          # Read the content of the file into a variable
          RELEASED_VERSION=$(cat "$VERSION_FILE")
          echo "RELEASED_VERSION: ${RELEASED_VERSION}"
          
          RELEASE_VERSION=0.0.73
          # Generate New Release Version
          SNAPSHOT_VERSION="${RELEASE_VERSION}-SNAPSHOT"
          echo "RELEASE_VERSION: ${RELEASE_VERSION}, SNAPSHOT_VERSION: ${SNAPSHOT_VERSION}"
          
          # Set Environment Variables
          echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> "$GITHUB_ENV"
          echo "BUILD_DATE=$BUILD_DATE" >> "$GITHUB_ENV"
          echo "RELEASED_VERSION=$RELEASED_VERSION" >> "$GITHUB_ENV"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_ENV"
          echo "SNAPSHOT_VERSION=$SNAPSHOT_VERSION" >> "$GITHUB_ENV"

        # Use -B or --batch-mode for non-interactive builds
      - name: Publish package to GitHub Packages
        if: ${{ env.RELEASE_VERSION != env.RELEASED_VERSION }}
        run: mvn --batch-mode deploy -Drevision=$RELEASE_VERSION -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Keeping the following code commented for the time being

#
#  sonar:
#    name: Build - SonarCloud Scan
#    runs-on: ubuntu-18.04
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: 21
#      - name: SonarCloud Scan
#        run: mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  artifact:
#    name: Publish - GitHub Packages
#    runs-on: ubuntu-18.04
#    needs: [build, sonar]
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: 21
#      - name: Publish artifact on GitHub Packages
#        run: mvn -B clean deploy -DskipTests
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#
#  docker:
#    name: Publish - Build to Docker Hub
#    runs-on: ubuntu-18.04
#    needs: [build, sonar]
#    env:
#      REPO: ${{ secrets.DOCKER_REPO }}
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: 21
#      - name: Login to Docker Hub
#        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
#      - name: Build Docker image
#        run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
#      - name: Publish Docker image
#        run: docker push $REPO

