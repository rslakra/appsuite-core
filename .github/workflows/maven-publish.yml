# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Publish Maven Package to Github

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'master'
        type: choice
        options:
          - develop
          - qa
          - staging
          - master

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }} # Checkout the specified branch

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set Environment
        run: |
          #!/bin/bash
          VERSION_FILE="version.txt"
          
          # Check if the version file exists
          if [ ! -f "$VERSION_FILE" ]; then
            echo "Error: Version file '$VERSION_FILE' not found."
            exit 1
          fi
          
          # Read the content of the file into a variable
          RELEASED_VERSION=$(cat "$VERSION_FILE")
          echo "RELEASED_VERSION: ${RELEASED_VERSION}"
          
          # Generate New Release Version
          VERSION_PARTS=(${RELEASED_VERSION//./ })
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=$((VERSION_PARTS[2] + 1))
          RELEASE_VERSION="$MAJOR.$MINOR.$PATCH"
          SNAPSHOT_VERSION="${RELEASE_VERSION}-SNAPSHOT"
          echo "RELEASE_VERSION: ${RELEASE_VERSION}, SNAPSHOT_VERSION: ${SNAPSHOT_VERSION}"
          
          # Set Environment Variables
          echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> "$GITHUB_ENV"
          echo "BUILD_DATE=$BUILD_DATE" >> "$GITHUB_ENV"
          echo "RELEASED_VERSION=$RELEASED_VERSION" >> "$GITHUB_ENV"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_ENV"
          echo "SNAPSHOT_VERSION=$SNAPSHOT_VERSION" >> "$GITHUB_ENV"

      - name: Update version.txt and commit
        run: |
          echo "${{ env.RELEASE_VERSION }}" > version.txt
          git config --global user.name "github-actions[bot]" # Configures the git user name for committing
          git config --global user.email "github-actions[bot]@users.noreply.github.com" # Configures the git user email for committing
          git add version.txt
          git commit -m "Bump version to v${{ env.RELEASE_VERSION }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # Use -B or --batch-mode for non-interactive builds
      - name: Publish package to GitHub Packages
        if: ${{ env.RELEASE_VERSION != env.RELEASED_VERSION }}
        run: mvn -B clean deploy -Drevision=$RELEASE_VERSION -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Keeping the following code commented for the time being

#
#  sonar:
#    name: Build - SonarCloud Scan
#    runs-on: ubuntu-18.04
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: 21
#      - name: SonarCloud Scan
#        run: mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  artifact:
#    name: Publish - GitHub Packages
#    runs-on: ubuntu-18.04
#    needs: [build, sonar]
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: 21
#      - name: Publish artifact on GitHub Packages
#        run: mvn -B clean deploy -DskipTests
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#
#  docker:
#    name: Publish - Build to Docker Hub
#    runs-on: ubuntu-18.04
#    needs: [build, sonar]
#    env:
#      REPO: ${{ secrets.DOCKER_REPO }}
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: 21
#      - name: Login to Docker Hub
#        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
#      - name: Build Docker image
#        run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
#      - name: Publish Docker image
#        run: docker push $REPO

